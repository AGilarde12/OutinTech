import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import models

data = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = data.load_data()

print(x_train.shape)
print(x_test.shape)
x_train = x_train.reshape(60000, 28, 28, 1)
x_test = x_test.reshape(10000,28,28,1)

x_train = x_train / 255.0
x_test = x_test / 255.0

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28,28,1)), #convolution layers
    tf.keras.layers.MaxPooling2D(2,2), #pooling layers
    tf.keras.layers.Flatten(), #Flattening layer
    tf.keras.layers.Dense(64, activation='relu'), #dense layer
    tf.keras.layers.Dense(10, activation='softmax') #output layer
])

model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

model.evaluate(x_test, y_test)
i = 1 #convolution number (1 to 32)
j = 1 #image number 

f, arr = plt.subplots(1,3)
layer_outputs = [layer.output for layer in model.layers]
activation_model = tf.keras.models.Model(inputs=model.input, outputs = layer_outputs)
arr[0].imshow(x_test[j].reshape(28,28)) #visual original image
for x in range(1,3):
    f =activation_model.predict(x_test[j].reshape(1, 28, 28, 1))[x-1] #visualize convolutions
    arr[x].imshow(f[0, :, :, i])
    arr[x].grid(False)





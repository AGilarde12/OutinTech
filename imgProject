import tensorflow as tf

data = tf.keras.datasets.fashion_mnist
(x_train, y_train), (x_test, y_test) = data.load_data()

import matplotlib.pyplot as plt
import numpy as np

plt.imshow(x_test[0])
print(y_train[0])
np.unique(y_train)

x_train = x_train.reshape(60000, 28, 28, 1)
x_train = x_train / 255.0
x_test = x_test.reshape(10000,28,28,1)
x_test = x_test / 255.0

# model = tf.keras.models.Sequential([
#   #tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28,28,1)), #convolution layers
#   #tf.keras.layers.MaxPooling2D(2,2), #pooling layers
#   tf.keras.layers.Flatten(input_shape=(28,28)), #Flattening layer
#   tf.keras.layers.Dense(64, activation='relu'), #dense layer
#   tf.keras.layers.Dense(10, activation='softmax') #output layer
# ])
# model.summary()
# model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
# model.fit(x_train, y_train, epochs=5)
# model.evaluate(x_test, y_test)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(128, (3,3), activation='relu', input_shape=(28,28,1)), #convolution layers
  tf.keras.layers.MaxPooling2D(2,2), #pooling layers
  tf.keras.layers.Flatten(), #Flattening layer
  tf.keras.layers.Dense(64, activation='relu'), #dense layer
  tf.keras.layers.Dense(10, activation='softmax') #output layer
])
model.summary()
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=6)
model.evaluate(x_test, y_test)
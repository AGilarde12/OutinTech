import tensorflow as tf
import numpy as np

data = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = data.load_data()

print(x_train.shape)
print(x_test.shape)

import matplotlib.pyplot as plt
print(y_train[0]) #class label
print(x_train[0]) #image 
plt.imshow(x_train[0])

x_train = x_train / 255.0 #Normalize data
x_test = x_test / 255.0 #IMPORTANT FOR ACCURACY

model = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)), #input layer
        tf.keras.layers.Dense(16, activation=tf.nn.relu), #hidden layer
        tf.keras.layers.Dense(10, activation=tf.nn.softmax)]) #output layer...  10 neurons for 10 digits

model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

predictions = model.predict(x_test)
print(predictions[0]) #output
print(np.around(predictions[0], 1)) # rounded output

print(y_test[0]) #class label
plt.imshow(x_test[0])

model.evaluate(x_test, y_test)


